Version 1: Seulement omp for afin de tester des choses, pas du tout opti.


unsigned char * rgb_to_grey(unsigned char* input_rgb,int size){
    unsigned char *grey_opti=(unsigned char *)malloc(size   * sizeof(unsigned char));
         int indexGrey=0;
         #pragma omp parallel for
    for(int i=0;i<size;i+=3){
        float value=0.299*input_rgb[i]+0.587*input_rgb[i+1]+0.114*input_rgb[i+2];
            grey_opti[indexGrey]=value;
            grey_opti[indexGrey+1]=value;
            grey_opti[indexGrey+2]=value;
            indexGrey+=3;
    }
    return grey_opti;
}

int*  findImage(unsigned char *imgSource, int inputImgWidth, int inputImgHeight, unsigned char *searchImg, int searchImgWidth, int searchImgHeight){
    int indiceI=-1;
    int indiceJ=-1;
    int differenceMin=9999999999;
    #pragma omp parallel for
    for (int i=0;i<inputImgHeight;i++){
        printf("%d \n",i);
        for(int j=0;j<inputImgWidth;j++){
            if(inputImgHeight-i>=searchImgHeight && inputImgWidth-j>=searchImgWidth ){
                unsigned char * petiteImage = getPetiteImage(i,j,imgSource,inputImgWidth,inputImgHeight,searchImg,searchImgWidth,searchImgHeight);
                int differenceCourante=compareImage(petiteImage,searchImg,searchImgHeight,searchImgWidth);
                if(differenceCourante<differenceMin){
                                
                    differenceMin=differenceCourante;
                    indiceJ=j;
                    indiceI=i;
                } 
                free(petiteImage);
            }
                        

        }

    }
    if(indiceI!=-1){
        printf("%d %d \n",indiceI,indiceJ);
            encadrerEnRouge(indiceI,indiceJ,imgSource,inputImgWidth,inputImgHeight,searchImgWidth,searchImgHeight);

    }
}

unsigned char* getPetiteImage(int x,int y,unsigned char *imgSource, int inputImgWidth, int inputImgHeight, unsigned char *searchImg, int searchImgWidth, int searchImgHeight){
   unsigned char * petiteImage=(unsigned char *)malloc(searchImgWidth*searchImgHeight*3  * sizeof(unsigned char));
   int indexInPetiteImage=0;
   #pragma omp parallel for
   for(int i=x;i<x+searchImgHeight;i++){
       for(int j=y;j<y+searchImgWidth;j++){
           int index=(i*inputImgWidth+j)*3;
           petiteImage[indexInPetiteImage]=imgSource[index];
           petiteImage[indexInPetiteImage+1]=imgSource[index+1];
           petiteImage[indexInPetiteImage+2]=imgSource[index+2];
           indexInPetiteImage+=3;
       }
   }
    return petiteImage;
    
}
------------------------------------------------------------------------------------------------------------------------------

OpenMP autre version: avec 4 sections

 int tailleATraiter=(inputImgWidth-searchImgWidth)*(inputImgHeight*searchImgHeight);
    int tranche=tailleATraiter;
    int moitieH=inputImgHeight*0.5;
    int moitieW=inputImgWidth*0.5;

    unsigned char *inputGrey = (unsigned char *)malloc(inputImgHeight*inputImgWidth * sizeof(unsigned char));
    unsigned char *searchGrey = (unsigned char *)malloc(searchImgHeight*searchImgWidth  * sizeof(unsigned char));
    inputGrey=rgb_to_grey(inputImg,inputImgHeight*inputImgWidth);

    searchGrey=rgb_to_grey(searchImg,searchImgHeight*searchImgWidth);
    unsigned char *hg = (unsigned char *)malloc((moitieW+searchImgWidth)*(moitieH+searchImgHeight)  * sizeof(unsigned char));
    unsigned char *hd = (unsigned char *)malloc((moitieW)*(moitieH+searchImgHeight)  * sizeof(unsigned char));
    unsigned char *bg = (unsigned char *)malloc((moitieW+searchImgWidth)*(moitieH)  * sizeof(unsigned char));
    unsigned char *bd = (unsigned char *)malloc((moitieW)*(moitieH)  * sizeof(unsigned char));

    hg=getPetiteImage(0,0,inputGrey,inputImgWidth,inputImgHeight,searchGrey,moitieW+searchImgWidth,moitieH+searchImgHeight);
    hd=getPetiteImage(0,moitieW,inputGrey,inputImgWidth,inputImgHeight,searchGrey,moitieW,moitieH+searchImgHeight);
    bg=getPetiteImage(moitieH,0,inputGrey,inputImgWidth,inputImgHeight,searchGrey,moitieW+searchImgWidth,moitieH);
    bd=getPetiteImage(moitieH,moitieW,inputGrey,inputImgWidth,inputImgHeight,searchGrey,moitieW,moitieH);

                int finalResult[NBCOEURS][3];

   #pragma omp parallel sections
    {   
        
            
            
        #pragma omp section
             {
            int result[3];
            test(hg,(moitieW+searchImgWidth),(moitieH+searchImgHeight),searchGrey,searchImgWidth,searchImgHeight,&result[0]);
            finalResult[omp_get_thread_num()][0]=result[0];       
            finalResult[omp_get_thread_num()][1]=result[1]; 
            finalResult[omp_get_thread_num()][2]=result[2]; 
        }
        #pragma omp section
        {
            int result[3];
            test(hd,(moitieW),(moitieH+searchImgHeight),searchGrey,searchImgWidth,searchImgHeight,&result[0]);
            finalResult[omp_get_thread_num()][0]=result[0];       
            finalResult[omp_get_thread_num()][1]=result[1]; 
            finalResult[omp_get_thread_num()][2]=result[2]+moitieW; 

        }
        #pragma omp section
        {    

            int result[3];
            test(bg,(moitieW+searchImgWidth),(moitieH),searchGrey,searchImgWidth,searchImgHeight,&result[0]);
            finalResult[omp_get_thread_num()][0]=result[0];       
            finalResult[omp_get_thread_num()][1]=result[1]+moitieH; 
            finalResult[omp_get_thread_num()][2]=result[2];      


        }
        #pragma omp section
        {
            int result[3];
            test(bd,(moitieW),(moitieH),searchGrey,searchImgWidth,searchImgHeight,&result[0]);
            finalResult[omp_get_thread_num()][0]=result[0];       
            finalResult[omp_get_thread_num()][1]=result[1]+moitieH; 
            finalResult[omp_get_thread_num()][2]=result[2]+moitieW; 

        }
    }


    int minDiff=finalResult[0][0];
    int minI=finalResult[0][1];
    int minJ=finalResult[0][2];
    for(int i=1;i<NBCOEURS;i++){
        if(finalResult[i][0]<minDiff){
            minDiff=finalResult[i][0];
            minI=finalResult[i][1];
            minJ=finalResult[i][2];
        }
    }
